#if Common_Server
using Microsoft.EntityFrameworkCore.Design;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Scaffolding;
using Microsoft.EntityFrameworkCore.Scaffolding.Internal;
using Microsoft.Extensions.DependencyInjection;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.RegularExpressions;

namespace Dash.Server.Dao
{
    class MyEntityTypeGenerator : CSharpEntityTypeGenerator
    {
        readonly string newLine = System.Environment.NewLine;

        private static List<string> IgnoreModels = new List<string>()
        {
            "Retention",
            "HiveItem",
            "MailTemplate2",
            "MailTemplate2Sent",
        };

        string tab(int number)
        {
            return new string(' ', number * 4);
        }

        public MyEntityTypeGenerator(IAnnotationCodeGenerator annotationCodeGenerator, ICSharpHelper cSharpHelper) : base(annotationCodeGenerator, cSharpHelper)
        {
        }

        public override string WriteCode(IEntityType entityType, string @namespace, bool useDataAnnotations)
        {
            int idx1, idx2;
            string snippet = string.Empty;

            string code = "// This code is generated by EntityTypeGenerator. Dot not Edit!" + newLine;
            code += base.WriteCode(entityType,
                                   "Dash.Model.Rdb",
                                   false);

            string className = entityType.Name;
            if (IgnoreModels.Contains(entityType.Name) == true)
            {
                return code;
            }

            // 1. class intereface            
            code = code.Replace($"public partial class {className}", $"[MessagePack.MessagePackObject()]{newLine}{tab(1)}public partial class {className} : Common.Model.IModel");

            // 2. constructor
            string consturctorsStr =
                    tab(2) + $"public {className}() {{ }}" + newLine +
                    tab(2) + $"public {className}({className} other)" + newLine +
                    tab(2) + $"{{" + newLine;
            foreach (IProperty property in entityType.GetProperties())
            {
                consturctorsStr += tab(3) + $"{property.Name} = other.{property.Name};" + newLine;
            }
            consturctorsStr += tab(2) + $"}}" + newLine;
            // 3. method implementation

            IKey pk = entityType.FindPrimaryKey();
            string mainKey = pk.Properties[0].Name;
            string subKeysStr = "null";
            string makeSubKeysWithNameStr = "null";
            bool mutipleDbModel = pk.Properties.Count > 1;
            var autoIncKeys = pk.Properties.Where(p => p.ValueGenerated == ValueGenerated.OnAdd).ToList();
            string autoIncKeysStr;
            if (autoIncKeys.Count > 0)
                autoIncKeysStr = string.Join(" && ", autoIncKeys.Select(p => $"{p.Name} > 0").ToArray());
            else
                autoIncKeysStr = "true";

            if (mutipleDbModel == true)
            {
                subKeysStr = "new List<string>() { ";
                makeSubKeysWithNameStr = "new List<KeyValuePair<string, object>>() { ";
                for (int i = 1; i < pk.Properties.Count; ++i)
                {
                    var subKeyName = pk.Properties[i].Name;
                    var columnName = SchemaInfoResolver.ResolveName(subKeyName);
                    bool last = i == pk.Properties.Count - 1;
                    subKeysStr += $"{subKeyName}.ToString(){(last ? "" : ", ")}";
                    // new KeyValuePair<string, object>("@EquipmentIndex", 1)
                    makeSubKeysWithNameStr += $"new KeyValuePair<string, object>($\"@{{nameof({columnName})}}\", keys[{i - 1}]){(last ? "" : ", ")}";
                }
                subKeysStr += " }";
                makeSubKeysWithNameStr += " }";
            }

            snippet = newLine +
                tab(2) + $"public static bool IsMultipleDbModel => {mutipleDbModel.ToString().ToLower()};" + newLine +
                tab(2) + $"public static string GetMainKeyName() {{ return nameof({mainKey}); }}" + newLine +
                tab(2) + $"public static List<KeyValuePair<string, object>> MakeSubKeysWithName(params object[] keys)" + newLine +
                tab(2) + $"{{" + newLine +
                tab(2) + $"    return {makeSubKeysWithNameStr};" + newLine +
                tab(2) + $"}}" + newLine +
                newLine +
                tab(2) + $"public string GetMainKey() {{ return {mainKey}.ToString(); }}" + newLine +
                tab(2) + $"public List<string> GetSubKeys()" + newLine +
                tab(2) + $"{{" + newLine +
                tab(2) + $"    return {subKeysStr};" + newLine +
                tab(2) + $"}}" + newLine +
                tab(2) + $"public bool IsAutoIncKeysValid()" + newLine +
                tab(2) + $"{{" + newLine +
                tab(2) + $"    return {autoIncKeysStr};" + newLine +
                tab(2) + $"}}" + newLine +
                newLine +
                $"{consturctorsStr}" +
                newLine;

            idx1 = code.IndexOf($"public partial class {className}");
            idx2 = code.IndexOf("{", idx1);
            code = code.Insert(idx2 + 1, snippet);

            // 4. Field Attribute
            // 4-1. MessagePack
            int messagePackIndex = 0;
            foreach (IProperty property in entityType.GetProperties())
            {
                try
                {
                    Regex regex = new Regex($"public [\\w\\?\\[\\]]* {property.Name} {{");
                    var match = regex.Match(code);
                    code = code.Replace(match.Groups[0].Value, $"[MessagePack.Key({messagePackIndex++})]" + newLine + tab(2) + match.Groups[0].Value);
                    code = code.Replace(match.Groups[0].Value, $"[Column]" + newLine + tab(2) + match.Groups[0].Value);
                }
                catch (System.Exception e)
                {
                    System.Console.WriteLine($"{className} > {property.Name}");
                    System.Console.WriteLine(e.ToString());
                }
            }
            // 4-2. KeyColumn
            foreach (IProperty property in pk.Properties)
            {
                try
                {
                    Regex regex = new Regex($"public [\\w\\?]* {property.Name}");
                    var match = regex.Match(code);
                    code = code.Replace(match.Groups[0].Value, "[KeyColumn]" + newLine + tab(2) + match.Groups[0].Value);
                }
                catch (System.Exception e)
                {
                    System.Console.WriteLine($"{className} > {property.Name}");
                    System.Console.WriteLine(e.ToString());
                }
            }

            return code;
        }
    }

    class MyDBContextGenerator : CSharpDbContextGenerator
    {
        readonly string newLine = System.Environment.NewLine;

        public MyDBContextGenerator(IProviderConfigurationCodeGenerator providerConfigurationCodeGenerator,
            IAnnotationCodeGenerator annotationCodeGenerator,
            ICSharpHelper cSharpHelper
        ) : base(providerConfigurationCodeGenerator, annotationCodeGenerator, cSharpHelper)
        {
        }

        public override string WriteCode(IModel model, string contextName, string connectionString, string contextNamespace, string modelNamespace, bool useDataAnnotations, bool suppressConnectionStringWarning, bool suppressOnConfiguring)
        {
            string code = base.WriteCode(model, contextName, connectionString, "Dash.Server.Dao", "Dash.Model.Rdb", useDataAnnotations, suppressConnectionStringWarning, suppressOnConfiguring);
            //int idx1, idx2;
            string snippet = string.Empty;

            snippet = "#if Common_Server" + newLine;
            code = code.Insert(0, snippet);
            code = code + "#endif";

            return code;
        }

        protected override void GenerateOnConfiguring(string connectionString, bool suppressConnectionStringWarning)
        {
            return;
        }
    }

    public class MyDesignTimeServices : IDesignTimeServices
    {
        public void ConfigureDesignTimeServices(IServiceCollection serviceCollection)
        {
            serviceCollection.AddSingleton<ICSharpEntityTypeGenerator, MyEntityTypeGenerator>();
            serviceCollection.AddSingleton<ICSharpDbContextGenerator, MyDBContextGenerator>();
#pragma warning disable CS0436 // 형식이 가져온 형식과 충돌합니다.
            serviceCollection.AddSingleton<IPluralizer, MyPluralizer>();
#pragma warning restore CS0436 // 형식이 가져온 형식과 충돌합니다.
        }
    }

    public class MyPluralizer : IPluralizer
    {
        public string Pluralize(string name)
        {
            return name;
        }

        public string Singularize(string name)
        {
            return name;
        }
    }
}
#endif