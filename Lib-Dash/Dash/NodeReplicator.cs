// this code is generated by Assets/Scripts/Tool/CodeGeneration. Do not edit.
using System.Collections.Generic;
public static class NodeReplicator
{
    private static Dictionary<int, System.Action<Dash.Core.Entities.BehaviorTree.Node, Dash.Core.Entities.BehaviorTree.Node>> _methods =
 new Dictionary<int, System.Action<Dash.Core.Entities.BehaviorTree.Node, Dash.Core.Entities.BehaviorTree.Node>>();

    static NodeReplicator()
    {
        _methods.Add(-554204400, ReplicateCalculateAggroAction);
        _methods.Add(-993336433, ReplicateCalculateAggroAStarMove);
        _methods.Add(-1328597183, ReplicateCalculateAggroEntity);
        _methods.Add(-925643618, ReplicateCalculateAStar);
        _methods.Add(-1742449465, ReplicateCalculateEntity);
        _methods.Add(1112310557, ReplicateCalculateEntityAction);
        _methods.Add(-1652610831, ReplicateCalculateEntityAStarMove);
        _methods.Add(-1452730403, ReplicateCalculateNearTileList);
        _methods.Add(-1626497699, ReplicateCalculateNearTileListAStarMove);
        _methods.Add(136835484, ReplicateCalculateRandomEntity);
        _methods.Add(942507168, ReplicateCalculateRandomEntityAction);
        _methods.Add(-103876453, ReplicateCalculateRandomEntityAStarMove);
        _methods.Add(1428494310, ReplicateCalculateSkillInvokeScore);
        _methods.Add(2026650027, ReplicateCalculateTargetNearTile);
        _methods.Add(1708076806, ReplicateCalculateTargetTile);
        _methods.Add(-1180611391, ReplicateCalculateTileAction);
        _methods.Add(1038502721, ReplicateCalculateTileList);
        _methods.Add(1164591340, ReplicateCalculateTileListAction);
        _methods.Add(2007845182, ReplicateCanBaseAttack);
        _methods.Add(-1174137281, ReplicateCircleCastTarget);
        _methods.Add(840867789, ReplicateCompareActionCount);
        _methods.Add(122832350, ReplicateCompareActionState);
        _methods.Add(-1600151535, ReplicateCompareActorState);
        _methods.Add(1548634444, ReplicateCompareAISkillActiveTime);
        _methods.Add(1329954070, ReplicateCompareAIStateTime);
        _methods.Add(-1710307708, ReplicateCompareAliveMonsterCount);
        _methods.Add(-1645745830, ReplicateCompareAwakeTime);
        _methods.Add(-70344894, ReplicateCompareBattleState);
        _methods.Add(1035473625, ReplicateCompareBlackBoard);
        _methods.Add(675497815, ReplicateCompareBuffStackCount);
        _methods.Add(-894308934, ReplicateCompareCCState);
        _methods.Add(480112593, ReplicateCompareLocationProgress);
        _methods.Add(146295322, ReplicateCompareMonsterDeadCount);
        _methods.Add(-1966970616, ReplicateCompareParameterAIAttackState);
        _methods.Add(920556130, ReplicateCompareParameterPlayerAIState);
        _methods.Add(1833225720, ReplicateComparePlayerType);
        _methods.Add(-688410579, ReplicateComparePrevActorState);
        _methods.Add(1784258462, ReplicateCompareTargetType);
        _methods.Add(-95880437, ReplicateCompareTileDistance);
        _methods.Add(1001123543, ReplicateCompareValue);
        _methods.Add(-1712751886, ReplicateDie);
        _methods.Add(-1703952005, ReplicateElapsedTimeThisStage);
        _methods.Add(-126391729, ReplicateExistNearEntity);
        _methods.Add(-484574315, ReplicateIdle);
        _methods.Add(-1438681083, ReplicateIsActionAllDone);
        _methods.Add(-642292939, ReplicateIsActionAvailable);
        _methods.Add(331054639, ReplicateIsActionBlock);
        _methods.Add(-359162699, ReplicateIsActionBlockAllDone);
        _methods.Add(84454158, ReplicateIsActionChain);
        _methods.Add(-1603098365, ReplicateIsActionDone);
        _methods.Add(-549840694, ReplicateIsActionGroupAvailable);
        _methods.Add(769649140, ReplicateIsActionLoop);
        _methods.Add(-1569573233, ReplicateIsActionProceeding);
        _methods.Add(-1167086458, ReplicateIsActionRange);
        _methods.Add(-414991795, ReplicateIsActorExistInDetectRange);
        _methods.Add(-1445136459, ReplicateIsActorsHpMaximum);
        _methods.Add(470609611, ReplicateIsAggroValidate);
        _methods.Add(-88519705, ReplicateIsBlackboardExist);
        _methods.Add(-319613685, ReplicateIsCCExist);
        _methods.Add(1909648569, ReplicateIsDirected);
        _methods.Add(-1851739799, ReplicateIsEquipSkillCharged);
        _methods.Add(-326397775, ReplicateIsExistTarget);
        _methods.Add(-343136067, ReplicateIsExistWallInRange);
        _methods.Add(370266140, ReplicateIsInDangerousPoint);
        _methods.Add(76576706, ReplicateIsLocationExist);
        _methods.Add(-1845483617, ReplicateIsMovable);
        _methods.Add(1259367772, ReplicateIsMoveArrive);
        _methods.Add(-423472501, ReplicateIsMovement);
        _methods.Add(-282885120, ReplicateIsOutSideUserArea);
        _methods.Add(268851630, ReplicateIsProjectileWarning);
        _methods.Add(-626742142, ReplicateIsSkillCharged);
        _methods.Add(-218606918, ReplicateIsSkillContain);
        _methods.Add(1366357582, ReplicateIsStageClear);
        _methods.Add(-1600454204, ReplicateIsTargetBetweenWall);
        _methods.Add(1318169619, ReplicateIsUserActionAllDone);
        _methods.Add(-1294440997, ReplicateIsUserMovement);
        _methods.Add(1061922919, ReplicateLazyInit);
        _methods.Add(569744763, ReplicateLookAttackableEntity);
        _methods.Add(647311651, ReplicateMoveRotation);
        _methods.Add(-1985117006, ReplicateMoveToGate);
        _methods.Add(-594018746, ReplicateMoveToRandomSafePoint);
        _methods.Add(-1751896938, ReplicateMoveToSafePointFromProjectile);
        _methods.Add(-1595026085, ReplicateOnce);
        _methods.Add(-1319725245, ReplicateOnceAfterStageClear);
        _methods.Add(-1093462919, ReplicateOnceInStage);
        _methods.Add(-1447849667, ReplicateProbGenerator);
        _methods.Add(-892044997, ReplicateRemoveActionCount);
        _methods.Add(-77608067, ReplicateRemoveAllActionCount);
        _methods.Add(1401840196, ReplicateRemoveAllAggro);
        _methods.Add(-1237316138, ReplicateRemoveLocation);
        _methods.Add(1451382545, ReplicateRemoveMoveStayTime);
        _methods.Add(-502642494, ReplicateRemoveTileMoveCount);
        _methods.Add(662271488, ReplicateRunActorBT);
        _methods.Add(-26213382, ReplicateRunAnotherBT);
        _methods.Add(-1343782959, ReplicateSearchAttackableEntity);
        _methods.Add(2095625944, ReplicateSelectAction);
        _methods.Add(-2141780046, ReplicateSelectActorState);
        _methods.Add(70514036, ReplicateSelectActorStateAction);
        _methods.Add(-679405128, ReplicateSelectMoveDirection);
        _methods.Add(2105110937, ReplicateSelector);
        _methods.Add(1886460537, ReplicateSequence);
        _methods.Add(1891587014, ReplicateSetAction);
        _methods.Add(656646104, ReplicateSetActionAllStop);
        _methods.Add(391254885, ReplicateSetActionGroup);
        _methods.Add(1986328902, ReplicateSetActionGroupInput);
        _methods.Add(601376309, ReplicateSetActionNextStep);
        _methods.Add(2026408169, ReplicateSetActionStop);
        _methods.Add(1618735788, ReplicateSetActorStateFinishAction);
        _methods.Add(274781487, ReplicateSetAIAttackAtate);
        _methods.Add(-1488570761, ReplicateSetBlackBoard);
        _methods.Add(196949423, ReplicateSetDirection);
        _methods.Add(-748307546, ReplicateSetDirectionAction);
        _methods.Add(1343640652, ReplicateSetLookDirection);
        _methods.Add(-995969628, ReplicateSetMoveDecision);
        _methods.Add(1652398242, ReplicateSetMoveDirection);
        _methods.Add(2056842293, ReplicateSetPlayerAIState);
        _methods.Add(-302740330, ReplicateSetTargetActor);
        _methods.Add(1427574769, ReplicateSetTargetAggro);
        _methods.Add(-1049731262, ReplicateSetUserTargetActor);
        _methods.Add(-1504438629, ReplicateSimulateSkillInput);
        _methods.Add(561351843, ReplicateWaitUntil);
        _methods.Add(335936492, ReplicateWakeUpGroup);
    }

    public static void Replicate(Dash.Core.Entities.BehaviorTree.Node src, Dash.Core.Entities.BehaviorTree.Node dst)
    {
        _methods[src.GetTypeCode()](src, dst);
    }

    private static void ReplicateCalculateAggroAction(Dash.Core.Entities.BehaviorTree.Node src, Dash.Core.Entities.BehaviorTree.Node dst)
    {
        var src2 = src as Dash.Core.Entities.BehaviorTree.CalculateAggroAction;
        var dst2 = dst as Dash.Core.Entities.BehaviorTree.CalculateAggroAction;

        dst2.blackBoardType = src2.blackBoardType;
        dst2.subBlackBoardType = src2.subBlackBoardType;
        dst2.actorType = src2.actorType;
        dst2.setLookDirection = src2.setLookDirection;
        dst2.setMoveDirection = src2.setMoveDirection;
        dst2.setTargetPosition = src2.setTargetPosition;
        dst2.moveDecisionAttribute = src2.moveDecisionAttribute;
        dst2.index = src2.index;
        dst2.actorState = src2.actorState;
        dst2.IsResetAggro = src2.IsResetAggro;
        dst2.displayVertical = src2.displayVertical;
    }
    private static void ReplicateCalculateAggroAStarMove(Dash.Core.Entities.BehaviorTree.Node src, Dash.Core.Entities.BehaviorTree.Node dst)
    {
        var src2 = src as Dash.Core.Entities.BehaviorTree.CalculateAggroAStarMove;
        var dst2 = dst as Dash.Core.Entities.BehaviorTree.CalculateAggroAStarMove;

        dst2.blackBoardType = src2.blackBoardType;
        dst2.subBlackBoardType = src2.subBlackBoardType;
        dst2.actorType = src2.actorType;
        dst2.setLookDirection = src2.setLookDirection;
        dst2.setMoveDirection = src2.setMoveDirection;
        dst2.setTargetPosition = src2.setTargetPosition;
        dst2.aStarExcludeAttribute = src2.aStarExcludeAttribute;
        dst2.aStarDestinationInfo = src2.aStarDestinationInfo;
        dst2.locationAttribute = src2.locationAttribute;
        dst2.compareAttribute = src2.compareAttribute;
        dst2.condition = src2.condition;
        dst2.isExistTargetAttribute = src2.isExistTargetAttribute;
        dst2.displayVertical = src2.displayVertical;
    }
    private static void ReplicateCalculateAggroEntity(Dash.Core.Entities.BehaviorTree.Node src, Dash.Core.Entities.BehaviorTree.Node dst)
    {
        var src2 = src as Dash.Core.Entities.BehaviorTree.CalculateAggroEntity;
        var dst2 = dst as Dash.Core.Entities.BehaviorTree.CalculateAggroEntity;

        dst2.blackBoardType = src2.blackBoardType;
        dst2.subBlackBoardType = src2.subBlackBoardType;
        dst2.actorType = src2.actorType;
        dst2.setLookDirection = src2.setLookDirection;
        dst2.setMoveDirection = src2.setMoveDirection;
        dst2.setTargetPosition = src2.setTargetPosition;
    }
    private static void ReplicateCalculateAStar(Dash.Core.Entities.BehaviorTree.Node src, Dash.Core.Entities.BehaviorTree.Node dst)
    {
        var src2 = src as Dash.Core.Entities.BehaviorTree.CalculateAStar;
        var dst2 = dst as Dash.Core.Entities.BehaviorTree.CalculateAStar;

        dst2.aStarExcludeAttribute = src2.aStarExcludeAttribute;
        dst2.aStarDestinationInfo = src2.aStarDestinationInfo;
    }
    private static void ReplicateCalculateEntity(Dash.Core.Entities.BehaviorTree.Node src, Dash.Core.Entities.BehaviorTree.Node dst)
    {
        var src2 = src as Dash.Core.Entities.BehaviorTree.CalculateEntity;
        var dst2 = dst as Dash.Core.Entities.BehaviorTree.CalculateEntity;

        dst2.blackBoardType = src2.blackBoardType;
        dst2.subBlackBoardType = src2.subBlackBoardType;
        dst2.targetAttribute = src2.targetAttribute;
        dst2.setLookDirection = src2.setLookDirection;
        dst2.setMoveDirection = src2.setMoveDirection;
        dst2.setTargetPosition = src2.setTargetPosition;
    }
    private static void ReplicateCalculateEntityAction(Dash.Core.Entities.BehaviorTree.Node src, Dash.Core.Entities.BehaviorTree.Node dst)
    {
        var src2 = src as Dash.Core.Entities.BehaviorTree.CalculateEntityAction;
        var dst2 = dst as Dash.Core.Entities.BehaviorTree.CalculateEntityAction;

        dst2.blackBoardType = src2.blackBoardType;
        dst2.subBlackBoardType = src2.subBlackBoardType;
        dst2.targetAttribute = src2.targetAttribute;
        dst2.setLookDirection = src2.setLookDirection;
        dst2.setMoveDirection = src2.setMoveDirection;
        dst2.setTargetPosition = src2.setTargetPosition;
        dst2.moveDecisionAttribute = src2.moveDecisionAttribute;
        dst2.index = src2.index;
        dst2.actorState = src2.actorState;
        dst2.displayVertical = src2.displayVertical;
    }
    private static void ReplicateCalculateEntityAStarMove(Dash.Core.Entities.BehaviorTree.Node src, Dash.Core.Entities.BehaviorTree.Node dst)
    {
        var src2 = src as Dash.Core.Entities.BehaviorTree.CalculateEntityAStarMove;
        var dst2 = dst as Dash.Core.Entities.BehaviorTree.CalculateEntityAStarMove;

        dst2.blackBoardType = src2.blackBoardType;
        dst2.subBlackBoardType = src2.subBlackBoardType;
        dst2.targetAttribute = src2.targetAttribute;
        dst2.setLookDirection = src2.setLookDirection;
        dst2.setMoveDirection = src2.setMoveDirection;
        dst2.setTargetPosition = src2.setTargetPosition;
        dst2.aStarExcludeAttribute = src2.aStarExcludeAttribute;
        dst2.aStarDestinationInfo = src2.aStarDestinationInfo;
        dst2.locationAttribute = src2.locationAttribute;
        dst2.compareAttribute = src2.compareAttribute;
        dst2.condition = src2.condition;
        dst2.isExistTargetAttribute = src2.isExistTargetAttribute;
        dst2.displayVertical = src2.displayVertical;
    }
    private static void ReplicateCalculateNearTileList(Dash.Core.Entities.BehaviorTree.Node src, Dash.Core.Entities.BehaviorTree.Node dst)
    {
        var src2 = src as Dash.Core.Entities.BehaviorTree.CalculateNearTileList;
        var dst2 = dst as Dash.Core.Entities.BehaviorTree.CalculateNearTileList;

        dst2.TileCoordinateList = src2.TileCoordinateList;
    }
    private static void ReplicateCalculateNearTileListAStarMove(Dash.Core.Entities.BehaviorTree.Node src, Dash.Core.Entities.BehaviorTree.Node dst)
    {
        var src2 = src as Dash.Core.Entities.BehaviorTree.CalculateNearTileListAStarMove;
        var dst2 = dst as Dash.Core.Entities.BehaviorTree.CalculateNearTileListAStarMove;

        dst2.aStarExcludeAttribute = src2.aStarExcludeAttribute;
        dst2.TileCoordinateList = src2.TileCoordinateList;
        dst2.displayVertical = src2.displayVertical;
    }
    private static void ReplicateCalculateRandomEntity(Dash.Core.Entities.BehaviorTree.Node src, Dash.Core.Entities.BehaviorTree.Node dst)
    {
        var src2 = src as Dash.Core.Entities.BehaviorTree.CalculateRandomEntity;
        var dst2 = dst as Dash.Core.Entities.BehaviorTree.CalculateRandomEntity;

        dst2.targetAttribute = src2.targetAttribute;
        dst2.blackBoardType = src2.blackBoardType;
        dst2.intWidth = src2.intWidth;
        dst2.intHeight = src2.intHeight;
        dst2.exceptWidth = src2.exceptWidth;
        dst2.exceptHeight = src2.exceptHeight;
        dst2.setTargetPosition = src2.setTargetPosition;
    }
    private static void ReplicateCalculateRandomEntityAction(Dash.Core.Entities.BehaviorTree.Node src, Dash.Core.Entities.BehaviorTree.Node dst)
    {
        var src2 = src as Dash.Core.Entities.BehaviorTree.CalculateRandomEntityAction;
        var dst2 = dst as Dash.Core.Entities.BehaviorTree.CalculateRandomEntityAction;

        dst2.targetAttribute = src2.targetAttribute;
        dst2.blackBoardType = src2.blackBoardType;
        dst2.intWidth = src2.intWidth;
        dst2.intHeight = src2.intHeight;
        dst2.exceptWidth = src2.exceptWidth;
        dst2.exceptHeight = src2.exceptHeight;
        dst2.index = src2.index;
        dst2.moveDecisionAttribute = src2.moveDecisionAttribute;
        dst2.actorState = src2.actorState;
        dst2.displayVertical = src2.displayVertical;
    }
    private static void ReplicateCalculateRandomEntityAStarMove(Dash.Core.Entities.BehaviorTree.Node src, Dash.Core.Entities.BehaviorTree.Node dst)
    {
        var src2 = src as Dash.Core.Entities.BehaviorTree.CalculateRandomEntityAStarMove;
        var dst2 = dst as Dash.Core.Entities.BehaviorTree.CalculateRandomEntityAStarMove;

        dst2.targetAttribute = src2.targetAttribute;
        dst2.blackBoardType = src2.blackBoardType;
        dst2.intWidth = src2.intWidth;
        dst2.intHeight = src2.intHeight;
        dst2.exceptWidth = src2.exceptWidth;
        dst2.exceptHeight = src2.exceptHeight;
        dst2.aStarExcludeAttribute = src2.aStarExcludeAttribute;
        dst2.aStarDestinationInfo = src2.aStarDestinationInfo;
        dst2.locationAttribute = src2.locationAttribute;
        dst2.compareAttribute = src2.compareAttribute;
        dst2.condition = src2.condition;
        dst2.isExistTargetAttribute = src2.isExistTargetAttribute;
        dst2.displayVertical = src2.displayVertical;
    }
    private static void ReplicateCalculateSkillInvokeScore(Dash.Core.Entities.BehaviorTree.Node src, Dash.Core.Entities.BehaviorTree.Node dst)
    {
        var src2 = src as Dash.Core.Entities.BehaviorTree.CalculateSkillInvokeScore;
        var dst2 = dst as Dash.Core.Entities.BehaviorTree.CalculateSkillInvokeScore;

        dst2.ActionGroupType = src2.ActionGroupType;
    }
    private static void ReplicateCalculateTargetNearTile(Dash.Core.Entities.BehaviorTree.Node src, Dash.Core.Entities.BehaviorTree.Node dst)
    {
        var src2 = src as Dash.Core.Entities.BehaviorTree.CalculateTargetNearTile;
        var dst2 = dst as Dash.Core.Entities.BehaviorTree.CalculateTargetNearTile;

        dst2.intWidth = src2.intWidth;
        dst2.intHeight = src2.intHeight;
    }
    private static void ReplicateCalculateTargetTile(Dash.Core.Entities.BehaviorTree.Node src, Dash.Core.Entities.BehaviorTree.Node dst)
    {
        var src2 = src as Dash.Core.Entities.BehaviorTree.CalculateTargetTile;
        var dst2 = dst as Dash.Core.Entities.BehaviorTree.CalculateTargetTile;

        dst2.calculateTargetTileAttribute = src2.calculateTargetTileAttribute;
        dst2.distance = src2.distance;
    }
    private static void ReplicateCalculateTileAction(Dash.Core.Entities.BehaviorTree.Node src, Dash.Core.Entities.BehaviorTree.Node dst)
    {
        var src2 = src as Dash.Core.Entities.BehaviorTree.CalculateTileAction;
        var dst2 = dst as Dash.Core.Entities.BehaviorTree.CalculateTileAction;

        dst2.calculateTargetTileAttribute = src2.calculateTargetTileAttribute;
        dst2.distance = src2.distance;
        dst2.moveDecisionAttribute = src2.moveDecisionAttribute;
        dst2.index = src2.index;
        dst2.actorState = src2.actorState;
        dst2.displayVertical = src2.displayVertical;
    }
    private static void ReplicateCalculateTileList(Dash.Core.Entities.BehaviorTree.Node src, Dash.Core.Entities.BehaviorTree.Node dst)
    {
        var src2 = src as Dash.Core.Entities.BehaviorTree.CalculateTileList;
        var dst2 = dst as Dash.Core.Entities.BehaviorTree.CalculateTileList;

        dst2.searchTileInfo = src2.searchTileInfo;
        dst2.exceptMonster = src2.exceptMonster;
        dst2.exceptMonsterRange = src2.exceptMonsterRange;
        dst2.exceptPlayer = src2.exceptPlayer;
        dst2.exceptPlayerRange = src2.exceptPlayerRange;
        dst2.searchRange = src2.searchRange;
        dst2.findCount = src2.findCount;
    }
    private static void ReplicateCalculateTileListAction(Dash.Core.Entities.BehaviorTree.Node src, Dash.Core.Entities.BehaviorTree.Node dst)
    {
        var src2 = src as Dash.Core.Entities.BehaviorTree.CalculateTileListAction;
        var dst2 = dst as Dash.Core.Entities.BehaviorTree.CalculateTileListAction;

        dst2.searchTileInfo = src2.searchTileInfo;
        dst2.exceptMonster = src2.exceptMonster;
        dst2.exceptMonsterRange = src2.exceptMonsterRange;
        dst2.exceptPlayer = src2.exceptPlayer;
        dst2.exceptPlayerRange = src2.exceptPlayerRange;
        dst2.searchRange = src2.searchRange;
        dst2.findCount = src2.findCount;
        dst2.moveDecisionAttribute = src2.moveDecisionAttribute;
        dst2.index = src2.index;
        dst2.actorState = src2.actorState;
        dst2.displayVertical = src2.displayVertical;
    }
    private static void ReplicateCanBaseAttack(Dash.Core.Entities.BehaviorTree.Node src, Dash.Core.Entities.BehaviorTree.Node dst)
    {
        var src2 = src as Dash.Core.Entities.BehaviorTree.CanBaseAttack;
        var dst2 = dst as Dash.Core.Entities.BehaviorTree.CanBaseAttack;

        dst2.boolAttribute = src2.boolAttribute;
    }
    private static void ReplicateCircleCastTarget(Dash.Core.Entities.BehaviorTree.Node src, Dash.Core.Entities.BehaviorTree.Node dst)
    {
        var src2 = src as Dash.Core.Entities.BehaviorTree.CircleCastTarget;
        var dst2 = dst as Dash.Core.Entities.BehaviorTree.CircleCastTarget;

        dst2.BoolAttribute = src2.BoolAttribute;
        dst2.Radius = src2.Radius;
    }
    private static void ReplicateCompareActionCount(Dash.Core.Entities.BehaviorTree.Node src, Dash.Core.Entities.BehaviorTree.Node dst)
    {
        var src2 = src as Dash.Core.Entities.BehaviorTree.CompareActionCount;
        var dst2 = dst as Dash.Core.Entities.BehaviorTree.CompareActionCount;

        dst2.index = src2.index;
        dst2.count = src2.count;
        dst2.compareAttribute = src2.compareAttribute;
    }
    private static void ReplicateCompareActionState(Dash.Core.Entities.BehaviorTree.Node src, Dash.Core.Entities.BehaviorTree.Node dst)
    {
        var src2 = src as Dash.Core.Entities.BehaviorTree.CompareActionState;
        var dst2 = dst as Dash.Core.Entities.BehaviorTree.CompareActionState;

        dst2.index = src2.index;
        dst2.actionStateType = src2.actionStateType;
        dst2.boolAttribute = src2.boolAttribute;
    }
    private static void ReplicateCompareActorState(Dash.Core.Entities.BehaviorTree.Node src, Dash.Core.Entities.BehaviorTree.Node dst)
    {
        var src2 = src as Dash.Core.Entities.BehaviorTree.CompareActorState;
        var dst2 = dst as Dash.Core.Entities.BehaviorTree.CompareActorState;

        dst2.actorState = src2.actorState;
        dst2.boolAttribute = src2.boolAttribute;
    }
    private static void ReplicateCompareAISkillActiveTime(Dash.Core.Entities.BehaviorTree.Node src, Dash.Core.Entities.BehaviorTree.Node dst)
    {
        var src2 = src as Dash.Core.Entities.BehaviorTree.CompareAISkillActiveTime;
        var dst2 = dst as Dash.Core.Entities.BehaviorTree.CompareAISkillActiveTime;

        dst2.ActionGroupType = src2.ActionGroupType;
        dst2.BoolAttribute = src2.BoolAttribute;
    }
    private static void ReplicateCompareAIStateTime(Dash.Core.Entities.BehaviorTree.Node src, Dash.Core.Entities.BehaviorTree.Node dst)
    {
        var src2 = src as Dash.Core.Entities.BehaviorTree.CompareAIStateTime;
        var dst2 = dst as Dash.Core.Entities.BehaviorTree.CompareAIStateTime;

        dst2.Time = src2.Time;
        dst2.CompareAttribute = src2.CompareAttribute;
    }
    private static void ReplicateCompareAliveMonsterCount(Dash.Core.Entities.BehaviorTree.Node src, Dash.Core.Entities.BehaviorTree.Node dst)
    {
        var src2 = src as Dash.Core.Entities.BehaviorTree.CompareAliveMonsterCount;
        var dst2 = dst as Dash.Core.Entities.BehaviorTree.CompareAliveMonsterCount;

        dst2.Conditions = src2.Conditions;
    }
    private static void ReplicateCompareAwakeTime(Dash.Core.Entities.BehaviorTree.Node src, Dash.Core.Entities.BehaviorTree.Node dst)
    {
        var src2 = src as Dash.Core.Entities.BehaviorTree.CompareAwakeTime;
        var dst2 = dst as Dash.Core.Entities.BehaviorTree.CompareAwakeTime;

        dst2.Time = src2.Time;
        dst2.CompareAttribute = src2.CompareAttribute;
    }
    private static void ReplicateCompareBattleState(Dash.Core.Entities.BehaviorTree.Node src, Dash.Core.Entities.BehaviorTree.Node dst)
    {
        var src2 = src as Dash.Core.Entities.BehaviorTree.CompareBattleState;
        var dst2 = dst as Dash.Core.Entities.BehaviorTree.CompareBattleState;

        dst2.battleStateAttribute = src2.battleStateAttribute;
        dst2.boolAttribute = src2.boolAttribute;
    }
    private static void ReplicateCompareBlackBoard(Dash.Core.Entities.BehaviorTree.Node src, Dash.Core.Entities.BehaviorTree.Node dst)
    {
        var src2 = src as Dash.Core.Entities.BehaviorTree.CompareBlackBoard;
        var dst2 = dst as Dash.Core.Entities.BehaviorTree.CompareBlackBoard;

        dst2.blackBoardType = src2.blackBoardType;
        dst2.intValue = src2.intValue;
        dst2.compareAttribute = src2.compareAttribute;
    }
    private static void ReplicateCompareBuffStackCount(Dash.Core.Entities.BehaviorTree.Node src, Dash.Core.Entities.BehaviorTree.Node dst)
    {
        var src2 = src as Dash.Core.Entities.BehaviorTree.CompareBuffStackCount;
        var dst2 = dst as Dash.Core.Entities.BehaviorTree.CompareBuffStackCount;

        dst2.BuffId = src2.BuffId;
        dst2.Count = src2.Count;
        dst2.CompareAttribute = src2.CompareAttribute;
    }
    private static void ReplicateCompareCCState(Dash.Core.Entities.BehaviorTree.Node src, Dash.Core.Entities.BehaviorTree.Node dst)
    {
        var src2 = src as Dash.Core.Entities.BehaviorTree.CompareCCState;
        var dst2 = dst as Dash.Core.Entities.BehaviorTree.CompareCCState;

        dst2.ccStateAttribute = src2.ccStateAttribute;
        dst2.boolAttribute = src2.boolAttribute;
    }
    private static void ReplicateCompareLocationProgress(Dash.Core.Entities.BehaviorTree.Node src, Dash.Core.Entities.BehaviorTree.Node dst)
    {
        var src2 = src as Dash.Core.Entities.BehaviorTree.CompareLocationProgress;
        var dst2 = dst as Dash.Core.Entities.BehaviorTree.CompareLocationProgress;

        dst2.locationAttrubite = src2.locationAttrubite;
        dst2.compareAttribute = src2.compareAttribute;
        dst2.condition = src2.condition;
    }
    private static void ReplicateCompareMonsterDeadCount(Dash.Core.Entities.BehaviorTree.Node src, Dash.Core.Entities.BehaviorTree.Node dst)
    {
        var src2 = src as Dash.Core.Entities.BehaviorTree.CompareMonsterDeadCount;
        var dst2 = dst as Dash.Core.Entities.BehaviorTree.CompareMonsterDeadCount;

        dst2.Conditions = src2.Conditions;
    }
    private static void ReplicateCompareParameterAIAttackState(Dash.Core.Entities.BehaviorTree.Node src, Dash.Core.Entities.BehaviorTree.Node dst)
    {
        var src2 = src as Dash.Core.Entities.BehaviorTree.CompareParameterAIAttackState;
        var dst2 = dst as Dash.Core.Entities.BehaviorTree.CompareParameterAIAttackState;

        dst2.AIAttackState = src2.AIAttackState;
        dst2.BoolAttribute = src2.BoolAttribute;
    }
    private static void ReplicateCompareParameterPlayerAIState(Dash.Core.Entities.BehaviorTree.Node src, Dash.Core.Entities.BehaviorTree.Node dst)
    {
        var src2 = src as Dash.Core.Entities.BehaviorTree.CompareParameterPlayerAIState;
        var dst2 = dst as Dash.Core.Entities.BehaviorTree.CompareParameterPlayerAIState;

        dst2.PlayerAIState = src2.PlayerAIState;
        dst2.BoolAttribute = src2.BoolAttribute;
    }
    private static void ReplicateComparePlayerType(Dash.Core.Entities.BehaviorTree.Node src, Dash.Core.Entities.BehaviorTree.Node dst)
    {
        var src2 = src as Dash.Core.Entities.BehaviorTree.ComparePlayerType;
        var dst2 = dst as Dash.Core.Entities.BehaviorTree.ComparePlayerType;

        dst2.PlayerType = src2.PlayerType;
    }
    private static void ReplicateComparePrevActorState(Dash.Core.Entities.BehaviorTree.Node src, Dash.Core.Entities.BehaviorTree.Node dst)
    {
        var src2 = src as Dash.Core.Entities.BehaviorTree.ComparePrevActorState;
        var dst2 = dst as Dash.Core.Entities.BehaviorTree.ComparePrevActorState;

        dst2.actorState = src2.actorState;
        dst2.boolAttribute = src2.boolAttribute;
    }
    private static void ReplicateCompareTargetType(Dash.Core.Entities.BehaviorTree.Node src, Dash.Core.Entities.BehaviorTree.Node dst)
    {
        var src2 = src as Dash.Core.Entities.BehaviorTree.CompareTargetType;
        var dst2 = dst as Dash.Core.Entities.BehaviorTree.CompareTargetType;

        dst2.actorType = src2.actorType;
        dst2.boolAttribute = src2.boolAttribute;
    }
    private static void ReplicateCompareTileDistance(Dash.Core.Entities.BehaviorTree.Node src, Dash.Core.Entities.BehaviorTree.Node dst)
    {
        var src2 = src as Dash.Core.Entities.BehaviorTree.CompareTileDistance;
        var dst2 = dst as Dash.Core.Entities.BehaviorTree.CompareTileDistance;

        dst2.compareAttribute = src2.compareAttribute;
        dst2.boolAttribute = src2.boolAttribute;
        dst2.TilePositionX = src2.TilePositionX;
        dst2.TilePositionY = src2.TilePositionY;
        dst2.Radius = src2.Radius;
    }
    private static void ReplicateCompareValue(Dash.Core.Entities.BehaviorTree.Node src, Dash.Core.Entities.BehaviorTree.Node dst)
    {
        var src2 = src as Dash.Core.Entities.BehaviorTree.CompareValue;
        var dst2 = dst as Dash.Core.Entities.BehaviorTree.CompareValue;

        dst2.compareValueAttribute = src2.compareValueAttribute;
        dst2.compareAttribute = src2.compareAttribute;
        dst2.condition = src2.condition;
    }
    private static void ReplicateDie(Dash.Core.Entities.BehaviorTree.Node src, Dash.Core.Entities.BehaviorTree.Node dst)
    {
        var src2 = src as Dash.Core.Entities.BehaviorTree.Die;
        var dst2 = dst as Dash.Core.Entities.BehaviorTree.Die;

    }
    private static void ReplicateElapsedTimeThisStage(Dash.Core.Entities.BehaviorTree.Node src, Dash.Core.Entities.BehaviorTree.Node dst)
    {
        var src2 = src as Dash.Core.Entities.BehaviorTree.ElapsedTimeThisStage;
        var dst2 = dst as Dash.Core.Entities.BehaviorTree.ElapsedTimeThisStage;

        dst2.boolAttribute = src2.boolAttribute;
        dst2.Seconds = src2.Seconds;
    }
    private static void ReplicateExistNearEntity(Dash.Core.Entities.BehaviorTree.Node src, Dash.Core.Entities.BehaviorTree.Node dst)
    {
        var src2 = src as Dash.Core.Entities.BehaviorTree.ExistNearEntity;
        var dst2 = dst as Dash.Core.Entities.BehaviorTree.ExistNearEntity;

        dst2.targetAttribute = src2.targetAttribute;
        dst2.searchAttribute = src2.searchAttribute;
        dst2.Range = src2.Range;
    }
    private static void ReplicateIdle(Dash.Core.Entities.BehaviorTree.Node src, Dash.Core.Entities.BehaviorTree.Node dst)
    {
        var src2 = src as Dash.Core.Entities.BehaviorTree.Idle;
        var dst2 = dst as Dash.Core.Entities.BehaviorTree.Idle;

    }
    private static void ReplicateIsActionAllDone(Dash.Core.Entities.BehaviorTree.Node src, Dash.Core.Entities.BehaviorTree.Node dst)
    {
        var src2 = src as Dash.Core.Entities.BehaviorTree.IsActionAllDone;
        var dst2 = dst as Dash.Core.Entities.BehaviorTree.IsActionAllDone;

        dst2.isActionAllDoneAttribute = src2.isActionAllDoneAttribute;
        dst2.boolAttribute = src2.boolAttribute;
        dst2.type = src2.type;
    }
    private static void ReplicateIsActionAvailable(Dash.Core.Entities.BehaviorTree.Node src, Dash.Core.Entities.BehaviorTree.Node dst)
    {
        var src2 = src as Dash.Core.Entities.BehaviorTree.IsActionAvailable;
        var dst2 = dst as Dash.Core.Entities.BehaviorTree.IsActionAvailable;

        dst2.index = src2.index;
        dst2.boolAttribute = src2.boolAttribute;
    }
    private static void ReplicateIsActionBlock(Dash.Core.Entities.BehaviorTree.Node src, Dash.Core.Entities.BehaviorTree.Node dst)
    {
        var src2 = src as Dash.Core.Entities.BehaviorTree.IsActionBlock;
        var dst2 = dst as Dash.Core.Entities.BehaviorTree.IsActionBlock;

        dst2.actionGroupType = src2.actionGroupType;
        dst2.boolAttribute = src2.boolAttribute;
    }
    private static void ReplicateIsActionBlockAllDone(Dash.Core.Entities.BehaviorTree.Node src, Dash.Core.Entities.BehaviorTree.Node dst)
    {
        var src2 = src as Dash.Core.Entities.BehaviorTree.IsActionBlockAllDone;
        var dst2 = dst as Dash.Core.Entities.BehaviorTree.IsActionBlockAllDone;

        dst2.isActionAllDoneAttribute = src2.isActionAllDoneAttribute;
        dst2.boolAttribute = src2.boolAttribute;
        dst2.type = src2.type;
    }
    private static void ReplicateIsActionChain(Dash.Core.Entities.BehaviorTree.Node src, Dash.Core.Entities.BehaviorTree.Node dst)
    {
        var src2 = src as Dash.Core.Entities.BehaviorTree.IsActionChain;
        var dst2 = dst as Dash.Core.Entities.BehaviorTree.IsActionChain;

        dst2.boolAttribute = src2.boolAttribute;
    }
    private static void ReplicateIsActionDone(Dash.Core.Entities.BehaviorTree.Node src, Dash.Core.Entities.BehaviorTree.Node dst)
    {
        var src2 = src as Dash.Core.Entities.BehaviorTree.IsActionDone;
        var dst2 = dst as Dash.Core.Entities.BehaviorTree.IsActionDone;

        dst2.index = src2.index;
        dst2.boolAttribute = src2.boolAttribute;
    }
    private static void ReplicateIsActionGroupAvailable(Dash.Core.Entities.BehaviorTree.Node src, Dash.Core.Entities.BehaviorTree.Node dst)
    {
        var src2 = src as Dash.Core.Entities.BehaviorTree.IsActionGroupAvailable;
        var dst2 = dst as Dash.Core.Entities.BehaviorTree.IsActionGroupAvailable;

        dst2.actionGroupType = src2.actionGroupType;
        dst2.boolAttribute = src2.boolAttribute;
    }
    private static void ReplicateIsActionLoop(Dash.Core.Entities.BehaviorTree.Node src, Dash.Core.Entities.BehaviorTree.Node dst)
    {
        var src2 = src as Dash.Core.Entities.BehaviorTree.IsActionLoop;
        var dst2 = dst as Dash.Core.Entities.BehaviorTree.IsActionLoop;

        dst2.index = src2.index;
        dst2.boolAttribute = src2.boolAttribute;
    }
    private static void ReplicateIsActionProceeding(Dash.Core.Entities.BehaviorTree.Node src, Dash.Core.Entities.BehaviorTree.Node dst)
    {
        var src2 = src as Dash.Core.Entities.BehaviorTree.IsActionProceeding;
        var dst2 = dst as Dash.Core.Entities.BehaviorTree.IsActionProceeding;

        dst2.boolAttribute = src2.boolAttribute;
        dst2.isActorMoveAction = src2.isActorMoveAction;
    }
    private static void ReplicateIsActionRange(Dash.Core.Entities.BehaviorTree.Node src, Dash.Core.Entities.BehaviorTree.Node dst)
    {
        var src2 = src as Dash.Core.Entities.BehaviorTree.IsActionRange;
        var dst2 = dst as Dash.Core.Entities.BehaviorTree.IsActionRange;

        dst2.boolAttribute = src2.boolAttribute;
        dst2.actionGroupType = src2.actionGroupType;
        dst2.AdditionalRange = src2.AdditionalRange;
    }
    private static void ReplicateIsActorExistInDetectRange(Dash.Core.Entities.BehaviorTree.Node src, Dash.Core.Entities.BehaviorTree.Node dst)
    {
        var src2 = src as Dash.Core.Entities.BehaviorTree.IsActorExistInDetectRange;
        var dst2 = dst as Dash.Core.Entities.BehaviorTree.IsActorExistInDetectRange;

        dst2.targetAttribute = src2.targetAttribute;
        dst2.boolAttribute = src2.boolAttribute;
        dst2.setTargetPosition = src2.setTargetPosition;
    }
    private static void ReplicateIsActorsHpMaximum(Dash.Core.Entities.BehaviorTree.Node src, Dash.Core.Entities.BehaviorTree.Node dst)
    {
        var src2 = src as Dash.Core.Entities.BehaviorTree.IsActorsHpMaximum;
        var dst2 = dst as Dash.Core.Entities.BehaviorTree.IsActorsHpMaximum;

        dst2.actorType = src2.actorType;
        dst2.boolAttribute = src2.boolAttribute;
    }
    private static void ReplicateIsAggroValidate(Dash.Core.Entities.BehaviorTree.Node src, Dash.Core.Entities.BehaviorTree.Node dst)
    {
        var src2 = src as Dash.Core.Entities.BehaviorTree.IsAggroValidate;
        var dst2 = dst as Dash.Core.Entities.BehaviorTree.IsAggroValidate;

        dst2.boolAttribute = src2.boolAttribute;
        dst2.actorType = src2.actorType;
    }
    private static void ReplicateIsBlackboardExist(Dash.Core.Entities.BehaviorTree.Node src, Dash.Core.Entities.BehaviorTree.Node dst)
    {
        var src2 = src as Dash.Core.Entities.BehaviorTree.IsBlackboardExist;
        var dst2 = dst as Dash.Core.Entities.BehaviorTree.IsBlackboardExist;

        dst2.blackBoardType = src2.blackBoardType;
        dst2.boolAttribute = src2.boolAttribute;
    }
    private static void ReplicateIsCCExist(Dash.Core.Entities.BehaviorTree.Node src, Dash.Core.Entities.BehaviorTree.Node dst)
    {
        var src2 = src as Dash.Core.Entities.BehaviorTree.IsCCExist;
        var dst2 = dst as Dash.Core.Entities.BehaviorTree.IsCCExist;

        dst2.ccType = src2.ccType;
        dst2.boolAttribute = src2.boolAttribute;
    }
    private static void ReplicateIsDirected(Dash.Core.Entities.BehaviorTree.Node src, Dash.Core.Entities.BehaviorTree.Node dst)
    {
        var src2 = src as Dash.Core.Entities.BehaviorTree.IsDirected;
        var dst2 = dst as Dash.Core.Entities.BehaviorTree.IsDirected;

        dst2.boolAttribute = src2.boolAttribute;
    }
    private static void ReplicateIsEquipSkillCharged(Dash.Core.Entities.BehaviorTree.Node src, Dash.Core.Entities.BehaviorTree.Node dst)
    {
        var src2 = src as Dash.Core.Entities.BehaviorTree.IsEquipSkillCharged;
        var dst2 = dst as Dash.Core.Entities.BehaviorTree.IsEquipSkillCharged;

        dst2.boolAttribute = src2.boolAttribute;
        dst2.SkillId = src2.SkillId;
    }
    private static void ReplicateIsExistTarget(Dash.Core.Entities.BehaviorTree.Node src, Dash.Core.Entities.BehaviorTree.Node dst)
    {
        var src2 = src as Dash.Core.Entities.BehaviorTree.IsExistTarget;
        var dst2 = dst as Dash.Core.Entities.BehaviorTree.IsExistTarget;

        dst2.boolAttribute = src2.boolAttribute;
        dst2.isExistTargetAttribute = src2.isExistTargetAttribute;
    }
    private static void ReplicateIsExistWallInRange(Dash.Core.Entities.BehaviorTree.Node src, Dash.Core.Entities.BehaviorTree.Node dst)
    {
        var src2 = src as Dash.Core.Entities.BehaviorTree.IsExistWallInRange;
        var dst2 = dst as Dash.Core.Entities.BehaviorTree.IsExistWallInRange;

        dst2.boolAttribute = src2.boolAttribute;
        dst2.Range = src2.Range;
    }
    private static void ReplicateIsInDangerousPoint(Dash.Core.Entities.BehaviorTree.Node src, Dash.Core.Entities.BehaviorTree.Node dst)
    {
        var src2 = src as Dash.Core.Entities.BehaviorTree.IsInDangerousPoint;
        var dst2 = dst as Dash.Core.Entities.BehaviorTree.IsInDangerousPoint;

        dst2.AddDistance = src2.AddDistance;
        dst2.CheckMonster = src2.CheckMonster;
        dst2.BoolAttribute = src2.BoolAttribute;
    }
    private static void ReplicateIsLocationExist(Dash.Core.Entities.BehaviorTree.Node src, Dash.Core.Entities.BehaviorTree.Node dst)
    {
        var src2 = src as Dash.Core.Entities.BehaviorTree.IsLocationExist;
        var dst2 = dst as Dash.Core.Entities.BehaviorTree.IsLocationExist;

        dst2.boolAttribute = src2.boolAttribute;
    }
    private static void ReplicateIsMovable(Dash.Core.Entities.BehaviorTree.Node src, Dash.Core.Entities.BehaviorTree.Node dst)
    {
        var src2 = src as Dash.Core.Entities.BehaviorTree.IsMovable;
        var dst2 = dst as Dash.Core.Entities.BehaviorTree.IsMovable;

        dst2.boolAttribute = src2.boolAttribute;
    }
    private static void ReplicateIsMoveArrive(Dash.Core.Entities.BehaviorTree.Node src, Dash.Core.Entities.BehaviorTree.Node dst)
    {
        var src2 = src as Dash.Core.Entities.BehaviorTree.IsMoveArrive;
        var dst2 = dst as Dash.Core.Entities.BehaviorTree.IsMoveArrive;

        dst2.boolAttribute = src2.boolAttribute;
    }
    private static void ReplicateIsMovement(Dash.Core.Entities.BehaviorTree.Node src, Dash.Core.Entities.BehaviorTree.Node dst)
    {
        var src2 = src as Dash.Core.Entities.BehaviorTree.IsMovement;
        var dst2 = dst as Dash.Core.Entities.BehaviorTree.IsMovement;

        dst2.boolAttribute = src2.boolAttribute;
    }
    private static void ReplicateIsOutSideUserArea(Dash.Core.Entities.BehaviorTree.Node src, Dash.Core.Entities.BehaviorTree.Node dst)
    {
        var src2 = src as Dash.Core.Entities.BehaviorTree.IsOutSideUserArea;
        var dst2 = dst as Dash.Core.Entities.BehaviorTree.IsOutSideUserArea;

        dst2.TileDistance = src2.TileDistance;
    }
    private static void ReplicateIsProjectileWarning(Dash.Core.Entities.BehaviorTree.Node src, Dash.Core.Entities.BehaviorTree.Node dst)
    {
        var src2 = src as Dash.Core.Entities.BehaviorTree.IsProjectileWarning;
        var dst2 = dst as Dash.Core.Entities.BehaviorTree.IsProjectileWarning;

        dst2.Range = src2.Range;
        dst2.BoolAttribute = src2.BoolAttribute;
    }
    private static void ReplicateIsSkillCharged(Dash.Core.Entities.BehaviorTree.Node src, Dash.Core.Entities.BehaviorTree.Node dst)
    {
        var src2 = src as Dash.Core.Entities.BehaviorTree.IsSkillCharged;
        var dst2 = dst as Dash.Core.Entities.BehaviorTree.IsSkillCharged;

        dst2.boolAttribute = src2.boolAttribute;
        dst2.SkillId = src2.SkillId;
    }
    private static void ReplicateIsSkillContain(Dash.Core.Entities.BehaviorTree.Node src, Dash.Core.Entities.BehaviorTree.Node dst)
    {
        var src2 = src as Dash.Core.Entities.BehaviorTree.IsSkillContain;
        var dst2 = dst as Dash.Core.Entities.BehaviorTree.IsSkillContain;

        dst2.skillId = src2.skillId;
    }
    private static void ReplicateIsStageClear(Dash.Core.Entities.BehaviorTree.Node src, Dash.Core.Entities.BehaviorTree.Node dst)
    {
        var src2 = src as Dash.Core.Entities.BehaviorTree.IsStageClear;
        var dst2 = dst as Dash.Core.Entities.BehaviorTree.IsStageClear;

    }
    private static void ReplicateIsTargetBetweenWall(Dash.Core.Entities.BehaviorTree.Node src, Dash.Core.Entities.BehaviorTree.Node dst)
    {
        var src2 = src as Dash.Core.Entities.BehaviorTree.IsTargetBetweenWall;
        var dst2 = dst as Dash.Core.Entities.BehaviorTree.IsTargetBetweenWall;

        dst2.boolAttribute = src2.boolAttribute;
    }
    private static void ReplicateIsUserActionAllDone(Dash.Core.Entities.BehaviorTree.Node src, Dash.Core.Entities.BehaviorTree.Node dst)
    {
        var src2 = src as Dash.Core.Entities.BehaviorTree.IsUserActionAllDone;
        var dst2 = dst as Dash.Core.Entities.BehaviorTree.IsUserActionAllDone;

        dst2.isActionAllDoneAttribute = src2.isActionAllDoneAttribute;
        dst2.boolAttribute = src2.boolAttribute;
        dst2.type = src2.type;
    }
    private static void ReplicateIsUserMovement(Dash.Core.Entities.BehaviorTree.Node src, Dash.Core.Entities.BehaviorTree.Node dst)
    {
        var src2 = src as Dash.Core.Entities.BehaviorTree.IsUserMovement;
        var dst2 = dst as Dash.Core.Entities.BehaviorTree.IsUserMovement;

        dst2.boolAttribute = src2.boolAttribute;
    }
    private static void ReplicateLazyInit(Dash.Core.Entities.BehaviorTree.Node src, Dash.Core.Entities.BehaviorTree.Node dst)
    {
        var src2 = src as Dash.Core.Entities.BehaviorTree.LazyInit;
        var dst2 = dst as Dash.Core.Entities.BehaviorTree.LazyInit;

    }
    private static void ReplicateLookAttackableEntity(Dash.Core.Entities.BehaviorTree.Node src, Dash.Core.Entities.BehaviorTree.Node dst)
    {
        var src2 = src as Dash.Core.Entities.BehaviorTree.LookAttackableEntity;
        var dst2 = dst as Dash.Core.Entities.BehaviorTree.LookAttackableEntity;

        dst2.targetAttribute = src2.targetAttribute;
        dst2.setTargetPosition = src2.setTargetPosition;
    }
    private static void ReplicateMoveRotation(Dash.Core.Entities.BehaviorTree.Node src, Dash.Core.Entities.BehaviorTree.Node dst)
    {
        var src2 = src as Dash.Core.Entities.BehaviorTree.MoveRotation;
        var dst2 = dst as Dash.Core.Entities.BehaviorTree.MoveRotation;

    }
    private static void ReplicateMoveToGate(Dash.Core.Entities.BehaviorTree.Node src, Dash.Core.Entities.BehaviorTree.Node dst)
    {
        var src2 = src as Dash.Core.Entities.BehaviorTree.MoveToGate;
        var dst2 = dst as Dash.Core.Entities.BehaviorTree.MoveToGate;

    }
    private static void ReplicateMoveToRandomSafePoint(Dash.Core.Entities.BehaviorTree.Node src, Dash.Core.Entities.BehaviorTree.Node dst)
    {
        var src2 = src as Dash.Core.Entities.BehaviorTree.MoveToRandomSafePoint;
        var dst2 = dst as Dash.Core.Entities.BehaviorTree.MoveToRandomSafePoint;

        dst2.LeftOffset = src2.LeftOffset;
        dst2.RightOffset = src2.RightOffset;
        dst2.BottomOffset = src2.BottomOffset;
        dst2.TopOffset = src2.TopOffset;
    }
    private static void ReplicateMoveToSafePointFromProjectile(Dash.Core.Entities.BehaviorTree.Node src, Dash.Core.Entities.BehaviorTree.Node dst)
    {
        var src2 = src as Dash.Core.Entities.BehaviorTree.MoveToSafePointFromProjectile;
        var dst2 = dst as Dash.Core.Entities.BehaviorTree.MoveToSafePointFromProjectile;

        dst2.BoolAttribute = src2.BoolAttribute;
        dst2.RefreshTime = src2.RefreshTime;
    }
    private static void ReplicateOnce(Dash.Core.Entities.BehaviorTree.Node src, Dash.Core.Entities.BehaviorTree.Node dst)
    {
        var src2 = src as Dash.Core.Entities.BehaviorTree.Once;
        var dst2 = dst as Dash.Core.Entities.BehaviorTree.Once;

        dst2.isAwake = src2.isAwake;
    }
    private static void ReplicateOnceAfterStageClear(Dash.Core.Entities.BehaviorTree.Node src, Dash.Core.Entities.BehaviorTree.Node dst)
    {
        var src2 = src as Dash.Core.Entities.BehaviorTree.OnceAfterStageClear;
        var dst2 = dst as Dash.Core.Entities.BehaviorTree.OnceAfterStageClear;

        dst2.PrevCleared = src2.PrevCleared;
    }
    private static void ReplicateOnceInStage(Dash.Core.Entities.BehaviorTree.Node src, Dash.Core.Entities.BehaviorTree.Node dst)
    {
        var src2 = src as Dash.Core.Entities.BehaviorTree.OnceInStage;
        var dst2 = dst as Dash.Core.Entities.BehaviorTree.OnceInStage;

        dst2.PrevStageNumber = src2.PrevStageNumber;
    }
    private static void ReplicateProbGenerator(Dash.Core.Entities.BehaviorTree.Node src, Dash.Core.Entities.BehaviorTree.Node dst)
    {
        var src2 = src as Dash.Core.Entities.BehaviorTree.ProbGenerator;
        var dst2 = dst as Dash.Core.Entities.BehaviorTree.ProbGenerator;

        dst2.ratio = src2.ratio;
    }
    private static void ReplicateRemoveActionCount(Dash.Core.Entities.BehaviorTree.Node src, Dash.Core.Entities.BehaviorTree.Node dst)
    {
        var src2 = src as Dash.Core.Entities.BehaviorTree.RemoveActionCount;
        var dst2 = dst as Dash.Core.Entities.BehaviorTree.RemoveActionCount;

        dst2.Index = src2.Index;
    }
    private static void ReplicateRemoveAllActionCount(Dash.Core.Entities.BehaviorTree.Node src, Dash.Core.Entities.BehaviorTree.Node dst)
    {
        var src2 = src as Dash.Core.Entities.BehaviorTree.RemoveAllActionCount;
        var dst2 = dst as Dash.Core.Entities.BehaviorTree.RemoveAllActionCount;

    }
    private static void ReplicateRemoveAllAggro(Dash.Core.Entities.BehaviorTree.Node src, Dash.Core.Entities.BehaviorTree.Node dst)
    {
        var src2 = src as Dash.Core.Entities.BehaviorTree.RemoveAllAggro;
        var dst2 = dst as Dash.Core.Entities.BehaviorTree.RemoveAllAggro;

    }
    private static void ReplicateRemoveLocation(Dash.Core.Entities.BehaviorTree.Node src, Dash.Core.Entities.BehaviorTree.Node dst)
    {
        var src2 = src as Dash.Core.Entities.BehaviorTree.RemoveLocation;
        var dst2 = dst as Dash.Core.Entities.BehaviorTree.RemoveLocation;

    }
    private static void ReplicateRemoveMoveStayTime(Dash.Core.Entities.BehaviorTree.Node src, Dash.Core.Entities.BehaviorTree.Node dst)
    {
        var src2 = src as Dash.Core.Entities.BehaviorTree.RemoveMoveStayTime;
        var dst2 = dst as Dash.Core.Entities.BehaviorTree.RemoveMoveStayTime;

    }
    private static void ReplicateRemoveTileMoveCount(Dash.Core.Entities.BehaviorTree.Node src, Dash.Core.Entities.BehaviorTree.Node dst)
    {
        var src2 = src as Dash.Core.Entities.BehaviorTree.RemoveTileMoveCount;
        var dst2 = dst as Dash.Core.Entities.BehaviorTree.RemoveTileMoveCount;

    }
    private static void ReplicateRunActorBT(Dash.Core.Entities.BehaviorTree.Node src, Dash.Core.Entities.BehaviorTree.Node dst)
    {
        var src2 = src as Dash.Core.Entities.BehaviorTree.RunActorBT;
        var dst2 = dst as Dash.Core.Entities.BehaviorTree.RunActorBT;

    }
    private static void ReplicateRunAnotherBT(Dash.Core.Entities.BehaviorTree.Node src, Dash.Core.Entities.BehaviorTree.Node dst)
    {
        var src2 = src as Dash.Core.Entities.BehaviorTree.RunAnotherBT;
        var dst2 = dst as Dash.Core.Entities.BehaviorTree.RunAnotherBT;

        dst2.id = src2.id;
        dst2.displayVertical = src2.displayVertical;
    }
    private static void ReplicateSearchAttackableEntity(Dash.Core.Entities.BehaviorTree.Node src, Dash.Core.Entities.BehaviorTree.Node dst)
    {
        var src2 = src as Dash.Core.Entities.BehaviorTree.SearchAttackableEntity;
        var dst2 = dst as Dash.Core.Entities.BehaviorTree.SearchAttackableEntity;

        dst2.targetAttribute = src2.targetAttribute;
        dst2.setTargetPosition = src2.setTargetPosition;
    }
    private static void ReplicateSelectAction(Dash.Core.Entities.BehaviorTree.Node src, Dash.Core.Entities.BehaviorTree.Node dst)
    {
        var src2 = src as Dash.Core.Entities.BehaviorTree.SelectAction;
        var dst2 = dst as Dash.Core.Entities.BehaviorTree.SelectAction;

        dst2.blackBoardType = src2.blackBoardType;
        dst2.actionSelectorAttribute = src2.actionSelectorAttribute;
        dst2.actionGroupType = src2.actionGroupType;
        dst2.candidate = src2.candidate;
    }
    private static void ReplicateSelectActorState(Dash.Core.Entities.BehaviorTree.Node src, Dash.Core.Entities.BehaviorTree.Node dst)
    {
        var src2 = src as Dash.Core.Entities.BehaviorTree.SelectActorState;
        var dst2 = dst as Dash.Core.Entities.BehaviorTree.SelectActorState;

        dst2.blackBoardAttribute = src2.blackBoardAttribute;
        dst2.actorState = src2.actorState;
        dst2.candidate = src2.candidate;
    }
    private static void ReplicateSelectActorStateAction(Dash.Core.Entities.BehaviorTree.Node src, Dash.Core.Entities.BehaviorTree.Node dst)
    {
        var src2 = src as Dash.Core.Entities.BehaviorTree.SelectActorStateAction;
        var dst2 = dst as Dash.Core.Entities.BehaviorTree.SelectActorStateAction;

        dst2.candidate = src2.candidate;
        dst2.conditions = src2.conditions;
    }
    private static void ReplicateSelectMoveDirection(Dash.Core.Entities.BehaviorTree.Node src, Dash.Core.Entities.BehaviorTree.Node dst)
    {
        var src2 = src as Dash.Core.Entities.BehaviorTree.SelectMoveDirection;
        var dst2 = dst as Dash.Core.Entities.BehaviorTree.SelectMoveDirection;

        dst2.candidate = src2.candidate;
    }
    private static void ReplicateSelector(Dash.Core.Entities.BehaviorTree.Node src, Dash.Core.Entities.BehaviorTree.Node dst)
    {
        var src2 = src as Dash.Core.Entities.BehaviorTree.Selector;
        var dst2 = dst as Dash.Core.Entities.BehaviorTree.Selector;

        dst2.displayVertical = src2.displayVertical;
    }
    private static void ReplicateSequence(Dash.Core.Entities.BehaviorTree.Node src, Dash.Core.Entities.BehaviorTree.Node dst)
    {
        var src2 = src as Dash.Core.Entities.BehaviorTree.Sequence;
        var dst2 = dst as Dash.Core.Entities.BehaviorTree.Sequence;

        dst2.displayVertical = src2.displayVertical;
    }
    private static void ReplicateSetAction(Dash.Core.Entities.BehaviorTree.Node src, Dash.Core.Entities.BehaviorTree.Node dst)
    {
        var src2 = src as Dash.Core.Entities.BehaviorTree.SetAction;
        var dst2 = dst as Dash.Core.Entities.BehaviorTree.SetAction;

        dst2.actionNodeAttribute = src2.actionNodeAttribute;
        dst2.index = src2.index;
    }
    private static void ReplicateSetActionAllStop(Dash.Core.Entities.BehaviorTree.Node src, Dash.Core.Entities.BehaviorTree.Node dst)
    {
        var src2 = src as Dash.Core.Entities.BehaviorTree.SetActionAllStop;
        var dst2 = dst as Dash.Core.Entities.BehaviorTree.SetActionAllStop;

        dst2.setActionAllStopAttribute = src2.setActionAllStopAttribute;
        dst2.actionGroupType = src2.actionGroupType;
    }
    private static void ReplicateSetActionGroup(Dash.Core.Entities.BehaviorTree.Node src, Dash.Core.Entities.BehaviorTree.Node dst)
    {
        var src2 = src as Dash.Core.Entities.BehaviorTree.SetActionGroup;
        var dst2 = dst as Dash.Core.Entities.BehaviorTree.SetActionGroup;

        dst2.actionGroupType = src2.actionGroupType;
    }
    private static void ReplicateSetActionGroupInput(Dash.Core.Entities.BehaviorTree.Node src, Dash.Core.Entities.BehaviorTree.Node dst)
    {
        var src2 = src as Dash.Core.Entities.BehaviorTree.SetActionGroupInput;
        var dst2 = dst as Dash.Core.Entities.BehaviorTree.SetActionGroupInput;

        dst2.actionGroupType = src2.actionGroupType;
    }
    private static void ReplicateSetActionNextStep(Dash.Core.Entities.BehaviorTree.Node src, Dash.Core.Entities.BehaviorTree.Node dst)
    {
        var src2 = src as Dash.Core.Entities.BehaviorTree.SetActionNextStep;
        var dst2 = dst as Dash.Core.Entities.BehaviorTree.SetActionNextStep;

        dst2.index = src2.index;
    }
    private static void ReplicateSetActionStop(Dash.Core.Entities.BehaviorTree.Node src, Dash.Core.Entities.BehaviorTree.Node dst)
    {
        var src2 = src as Dash.Core.Entities.BehaviorTree.SetActionStop;
        var dst2 = dst as Dash.Core.Entities.BehaviorTree.SetActionStop;

        dst2.index = src2.index;
    }
    private static void ReplicateSetActorStateFinishAction(Dash.Core.Entities.BehaviorTree.Node src, Dash.Core.Entities.BehaviorTree.Node dst)
    {
        var src2 = src as Dash.Core.Entities.BehaviorTree.SetActorStateFinishAction;
        var dst2 = dst as Dash.Core.Entities.BehaviorTree.SetActorStateFinishAction;

        dst2.actionIndex = src2.actionIndex;
        dst2.actorState = src2.actorState;
        dst2.waitTime = src2.waitTime;
    }
    private static void ReplicateSetAIAttackAtate(Dash.Core.Entities.BehaviorTree.Node src, Dash.Core.Entities.BehaviorTree.Node dst)
    {
        var src2 = src as Dash.Core.Entities.BehaviorTree.SetAIAttackAtate;
        var dst2 = dst as Dash.Core.Entities.BehaviorTree.SetAIAttackAtate;

        dst2.AIAttackState = src2.AIAttackState;
    }
    private static void ReplicateSetBlackBoard(Dash.Core.Entities.BehaviorTree.Node src, Dash.Core.Entities.BehaviorTree.Node dst)
    {
        var src2 = src as Dash.Core.Entities.BehaviorTree.SetBlackBoard;
        var dst2 = dst as Dash.Core.Entities.BehaviorTree.SetBlackBoard;

        dst2.blackBoardType = src2.blackBoardType;
        dst2.blackBoardAttribute = src2.blackBoardAttribute;
        dst2.intValue = src2.intValue;
        dst2.intMinValue = src2.intMinValue;
        dst2.intMaxValue = src2.intMaxValue;
    }
    private static void ReplicateSetDirection(Dash.Core.Entities.BehaviorTree.Node src, Dash.Core.Entities.BehaviorTree.Node dst)
    {
        var src2 = src as Dash.Core.Entities.BehaviorTree.SetDirection;
        var dst2 = dst as Dash.Core.Entities.BehaviorTree.SetDirection;

        dst2.SetDirectionAttribute = src2.SetDirectionAttribute;
        dst2.value = src2.value;
        dst2.minValue = src2.minValue;
        dst2.maxValue = src2.maxValue;
        dst2.actionGroupType = src2.actionGroupType;
        dst2.setTargetPosition = src2.setTargetPosition;
    }
    private static void ReplicateSetDirectionAction(Dash.Core.Entities.BehaviorTree.Node src, Dash.Core.Entities.BehaviorTree.Node dst)
    {
        var src2 = src as Dash.Core.Entities.BehaviorTree.SetDirectionAction;
        var dst2 = dst as Dash.Core.Entities.BehaviorTree.SetDirectionAction;

        dst2.SetDirectionAttribute = src2.SetDirectionAttribute;
        dst2.value = src2.value;
        dst2.minValue = src2.minValue;
        dst2.maxValue = src2.maxValue;
        dst2.index = src2.index;
        dst2.actorState = src2.actorState;
        dst2.displayVertical = src2.displayVertical;
    }
    private static void ReplicateSetLookDirection(Dash.Core.Entities.BehaviorTree.Node src, Dash.Core.Entities.BehaviorTree.Node dst)
    {
        var src2 = src as Dash.Core.Entities.BehaviorTree.SetLookDirection;
        var dst2 = dst as Dash.Core.Entities.BehaviorTree.SetLookDirection;

        dst2.setLookDirectionAttribute = src2.setLookDirectionAttribute;
        dst2.actionGroupType = src2.actionGroupType;
        dst2.setTargetPosition = src2.setTargetPosition;
    }
    private static void ReplicateSetMoveDecision(Dash.Core.Entities.BehaviorTree.Node src, Dash.Core.Entities.BehaviorTree.Node dst)
    {
        var src2 = src as Dash.Core.Entities.BehaviorTree.SetMoveDecision;
        var dst2 = dst as Dash.Core.Entities.BehaviorTree.SetMoveDecision;

        dst2.moveDecisionAttribute = src2.moveDecisionAttribute;
    }
    private static void ReplicateSetMoveDirection(Dash.Core.Entities.BehaviorTree.Node src, Dash.Core.Entities.BehaviorTree.Node dst)
    {
        var src2 = src as Dash.Core.Entities.BehaviorTree.SetMoveDirection;
        var dst2 = dst as Dash.Core.Entities.BehaviorTree.SetMoveDirection;

        dst2.setMoveDirectionAttribute = src2.setMoveDirectionAttribute;
        dst2.angle = src2.angle;
        dst2.setLookDirection = src2.setLookDirection;
        dst2.setMoveDirection = src2.setMoveDirection;
        dst2.setTargetPosition = src2.setTargetPosition;
    }
    private static void ReplicateSetPlayerAIState(Dash.Core.Entities.BehaviorTree.Node src, Dash.Core.Entities.BehaviorTree.Node dst)
    {
        var src2 = src as Dash.Core.Entities.BehaviorTree.SetPlayerAIState;
        var dst2 = dst as Dash.Core.Entities.BehaviorTree.SetPlayerAIState;

        dst2.PlayerAIState = src2.PlayerAIState;
    }
    private static void ReplicateSetTargetActor(Dash.Core.Entities.BehaviorTree.Node src, Dash.Core.Entities.BehaviorTree.Node dst)
    {
        var src2 = src as Dash.Core.Entities.BehaviorTree.SetTargetActor;
        var dst2 = dst as Dash.Core.Entities.BehaviorTree.SetTargetActor;

        dst2.type = src2.type;
    }
    private static void ReplicateSetTargetAggro(Dash.Core.Entities.BehaviorTree.Node src, Dash.Core.Entities.BehaviorTree.Node dst)
    {
        var src2 = src as Dash.Core.Entities.BehaviorTree.SetTargetAggro;
        var dst2 = dst as Dash.Core.Entities.BehaviorTree.SetTargetAggro;

        dst2.TargetAttribute = src2.TargetAttribute;
        dst2.AggroValue = src2.AggroValue;
        dst2.AggroValueAttribute = src2.AggroValueAttribute;
    }
    private static void ReplicateSetUserTargetActor(Dash.Core.Entities.BehaviorTree.Node src, Dash.Core.Entities.BehaviorTree.Node dst)
    {
        var src2 = src as Dash.Core.Entities.BehaviorTree.SetUserTargetActor;
        var dst2 = dst as Dash.Core.Entities.BehaviorTree.SetUserTargetActor;

    }
    private static void ReplicateSimulateSkillInput(Dash.Core.Entities.BehaviorTree.Node src, Dash.Core.Entities.BehaviorTree.Node dst)
    {
        var src2 = src as Dash.Core.Entities.BehaviorTree.SimulateSkillInput;
        var dst2 = dst as Dash.Core.Entities.BehaviorTree.SimulateSkillInput;

        dst2.State = src2.State;
        dst2.Index = src2.Index;
    }
    private static void ReplicateWaitUntil(Dash.Core.Entities.BehaviorTree.Node src, Dash.Core.Entities.BehaviorTree.Node dst)
    {
        var src2 = src as Dash.Core.Entities.BehaviorTree.WaitUntil;
        var dst2 = dst as Dash.Core.Entities.BehaviorTree.WaitUntil;

        dst2.BoolAttribute = src2.BoolAttribute;
        dst2.TimeRange = src2.TimeRange;
    }
    private static void ReplicateWakeUpGroup(Dash.Core.Entities.BehaviorTree.Node src, Dash.Core.Entities.BehaviorTree.Node dst)
    {
        var src2 = src as Dash.Core.Entities.BehaviorTree.WakeUpGroup;
        var dst2 = dst as Dash.Core.Entities.BehaviorTree.WakeUpGroup;

    }
}
